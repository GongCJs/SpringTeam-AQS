<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.spring.aqs.mapper.aqsQuestionMapper">
	
	
	<resultMap id="BaseResultMap"
		type="team.spring.aqs.entity.aqsQuestion">
		<id column="question_id" jdbcType="VARCHAR" property="questionId" />
		<result column="user_account" jdbcType="VARCHAR"
			property="userAccount" />
		<result column="question_introduce" jdbcType="VARCHAR"
			property="questionIntroduce" />
		<result column="question_preview_count" jdbcType="INTEGER"
			property="questionPreviewCount" />
		<result column="question_praise" jdbcType="INTEGER"
			property="questionPraise" />
		<result column="question_ifpublic" jdbcType="INTEGER"
			property="questionIfpublic" />
		<result column="question_type_id" jdbcType="VARCHAR"
			property="questionTypeId" />
		<result column="question_create_time" jdbcType="TIMESTAMP"
			property="questionCreateTime" />
	</resultMap>
	
	
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
		type="team.spring.aqs.entity.aqsQuestion">
		<result column="question_content" jdbcType="LONGVARCHAR"
			property="questionContent" />
	</resultMap>
	
	
	<sql id="Base_Column_List">
		question_id, user_account, question_introduce, question_preview_count,
		question_praise,
		question_ifpublic, question_type_id, question_create_time
	</sql>
	<sql id="Blob_Column_List">
		question_content
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.String"
		resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from aqs_question
		where question_id = #{questionId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from aqs_question
		where question_id = #{questionId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert"
		parameterType="team.spring.aqs.entity.aqsQuestion">
		insert into aqs_question (question_id, user_account, question_introduce,
		question_preview_count, question_praise, question_ifpublic,
		question_type_id, question_create_time, question_content
		)
		values (#{questionId,jdbcType=VARCHAR}, #{userAccount,jdbcType=VARCHAR},
		#{questionIntroduce,jdbcType=VARCHAR},
		#{questionPreviewCount,jdbcType=INTEGER},
		#{questionPraise,jdbcType=INTEGER},
		#{questionIfpublic,jdbcType=INTEGER},
		#{questionTypeId,jdbcType=VARCHAR},
		#{questionCreateTime,jdbcType=TIMESTAMP},
		#{questionContent,jdbcType=LONGVARCHAR}
		)
	</insert>
	<insert id="insertSelective"
		parameterType="team.spring.aqs.entity.aqsQuestion">
		insert into aqs_question
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="questionId != null">
				question_id,
			</if>
			<if test="userAccount != null">
				user_account,
			</if>
			<if test="questionIntroduce != null">
				question_introduce,
			</if>
			<if test="questionPreviewCount != null">
				question_preview_count,
			</if>
			<if test="questionPraise != null">
				question_praise,
			</if>
			<if test="questionIfpublic != null">
				question_ifpublic,
			</if>
			<if test="questionTypeId != null">
				question_type_id,
			</if>
			<if test="questionCreateTime != null">
				question_create_time,
			</if>
			<if test="questionContent != null">
				question_content,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="questionId != null">
				#{questionId,jdbcType=VARCHAR},
			</if>
			<if test="userAccount != null">
				#{userAccount,jdbcType=VARCHAR},
			</if>
			<if test="questionIntroduce != null">
				#{questionIntroduce,jdbcType=VARCHAR},
			</if>
			<if test="questionPreviewCount != null">
				#{questionPreviewCount,jdbcType=INTEGER},
			</if>
			<if test="questionPraise != null">
				#{questionPraise,jdbcType=INTEGER},
			</if>
			<if test="questionIfpublic != null">
				#{questionIfpublic,jdbcType=INTEGER},
			</if>
			<if test="questionTypeId != null">
				#{questionTypeId,jdbcType=VARCHAR},
			</if>
			<if test="questionCreateTime != null">
				#{questionCreateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="questionContent != null">
				#{questionContent,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="team.spring.aqs.entity.aqsQuestion">
		update aqs_question
		<set>
			<if test="userAccount != null">
				user_account = #{userAccount,jdbcType=VARCHAR},
			</if>
			<if test="questionIntroduce != null">
				question_introduce = #{questionIntroduce,jdbcType=VARCHAR},
			</if>
			<if test="questionPreviewCount != null">
				question_preview_count = #{questionPreviewCount,jdbcType=INTEGER},
			</if>
			<if test="questionPraise != null">
				question_praise = #{questionPraise,jdbcType=INTEGER},
			</if>
			<if test="questionIfpublic != null">
				question_ifpublic = #{questionIfpublic,jdbcType=INTEGER},
			</if>
			<if test="questionTypeId != null">
				question_type_id = #{questionTypeId,jdbcType=VARCHAR},
			</if>
			<if test="questionCreateTime != null">
				question_create_time = #{questionCreateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="questionContent != null">
				question_content = #{questionContent,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where question_id = #{questionId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs"
		parameterType="team.spring.aqs.entity.aqsQuestion">
		update aqs_question
		set user_account = #{userAccount,jdbcType=VARCHAR},
		question_introduce = #{questionIntroduce,jdbcType=VARCHAR},
		question_preview_count = #{questionPreviewCount,jdbcType=INTEGER},
		question_praise = #{questionPraise,jdbcType=INTEGER},
		question_ifpublic = #{questionIfpublic,jdbcType=INTEGER},
		question_type_id = #{questionTypeId,jdbcType=VARCHAR},
		question_create_time = #{questionCreateTime,jdbcType=TIMESTAMP},
		question_content = #{questionContent,jdbcType=LONGVARCHAR}
		where question_id = #{questionId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="team.spring.aqs.entity.aqsQuestion">
		update aqs_question
		set user_account = #{userAccount,jdbcType=VARCHAR},
		question_introduce = #{questionIntroduce,jdbcType=VARCHAR},
		question_preview_count = #{questionPreviewCount,jdbcType=INTEGER},
		question_praise = #{questionPraise,jdbcType=INTEGER},
		question_ifpublic = #{questionIfpublic,jdbcType=INTEGER},
		question_type_id = #{questionTypeId,jdbcType=VARCHAR},
		question_create_time = #{questionCreateTime,jdbcType=TIMESTAMP}
		where question_id = #{questionId,jdbcType=VARCHAR}
	</update>

	<select id="findQuestionByType" resultMap="BaseResultMap">
		SELECT * FROM aqs_question
		<if test="questionTypeId != null and questionTypeId !=''">
			WHERE question_type_id = #{questionTypeId}
		</if>
		<if test="type !=null and type!=''">
			group by 
			<if test="type==1">
				question_create_time desc
			</if>
			<if test="type==2">
				question_preview_count desc
			</if>
		</if>
		
	</select>
  
  
  <select id="findObjects" resultType="team.spring.aqs.entity.aqsQuestion">
		select * from aqs_question where question_id=#{id}
	</select>
</mapper>